package ch5;
/*p.176
자바: 객체지향 프로그래밍(Object Oriented Programming)
=> 작업 순서를 중요하게 생각하지 않고, 기능별로 작업을 분리한 후 필요한 기능이 있다면 가져다 사용하는 방식.
=> 객체 단위로 작업하여 언제든지 사용할 수 있도록 함

객체 모델링: 프로그램 구현 전, 어떤 객체를 어떻게 만들지 정의
1. 객체명: 객체를 나타낼 수 있는 이름 부여
2. 속성: 객체만이 가진 고유한 특성
ex) height, weight, color, name
3. 동작: 객체가 수행하는 동작
ex) land, shooeLaser
=> 객체 = 속성 + 동작
 
클래스 다이어그램: 객체 모델링에서 표현된 구조를 프로그래밍 언어로 표현하기 쉽게 작성한 것
1. 클래스: 객체를 만드는 틀(설계도). 자바 소스 파일 이름과 클래스 이름은 동일해야하며, 대문자로 시작하는 것이 관례. 공백 불가
2. 필드: 속성. 소문자로 시작하는 것이 관례. 하지만, 값이 변경되지 않는 변수의 이름은 모두 대문자로 지정하는 것이 관레. 공백, 예약어 불가
3. 메서드: 동작. 첫 글자는 소문자로 시작. 기능을 나타낼 수 있는 이름으로 지정. 공백 불가.
*/

/*p.184
접근 제한자: 각 요소에 접근 권한 조절. 클래스, 필드, 메서드 선언 시 지정 가능

접근제한자 class 클래스명 {
	접근제한자 필드선언;
	접근제한자 메서드선언;
	}
1. private: 같은 클래스로 제한. 외부에서 접근하는 것을 차단해 의도하지 않은 데이터 변형 방지
2. default: 같은 패키지로 제한. 접근 제한자 생략 시 자동 지정됨.
3. protected: 같은 패키지와 상속관계로 제한
4. public: 조건 없이 무조건 접근 가능.
*/

/* p.195
package: 클래스를 관리하는 방법. 파일 시스XPA의 디렉터리.

class import -> import 문 사용: 다른 패키지에 객체가 있을 경우 어떤 패키지에 속해 있는지를 소스 파일에 표시.
즉, 사용하려는 객체가 속한 패키지 정보 나타내주는 것.(하위 패키기는 제외)
Ex) import 패키지명[.하위패키지명].클래스명;
	import 패키지명[.하위패키지명].*;
*/

/* p.198
필드 VS 변수: 필드는 클래스에서 객체의 속성을 표현, 변수는 메서드에 필요한 값을 잠시 저장할 목적으로 선언.
즉, 필드는 메서드 밖에 선언해 메서드 안/밖 어디서나 사용 가능, 변수는 메서드 안에 선언해 메서드 안에서만 사용 가능.

메서드 반환 타입은 해당 메서드가 실행된 다음 돌려주는 값의 타입을 의미. 만일 돌려주는 값이 없으면 void로 지정.
return: 메서드의 실행을 중지하고 메서드를 호출한 곳으로 되돌아가게 하는 명령.
메서드를 호출한 곳으로 되돌아가면서 특정한 값을 전달하는 것: 반환값.
=> 반환값과 반환 타입을 맞추지 않으면 타입 오류 발생하므로 반드시 같아야 함.
*/




//p.198
public class Armor {
	private String name;
	private int height;
	private int weight;
	private String color;
	private boolean isFly;
	// up field

	public void setName() {
		String value = "mark6"; // variable
		name = value;
	}

}


/*인자(argument): 메서드의 명령문을 실행하기 위해 필요한 데이터를 메서드를 호출하는 곳으로부터 전달받을 수 있음.\ 인자 값 ↔
반환 값 매개변수(parameter): 메서드가 호출될 때 함께 전달되는 값을 받아 처리하려는 목적으로 선언하는 변수. 즉, 인자값을
받아서 저장하는 변수
  
public void speedUp(int value) {
	int speed=value;  ← value가 매개변수
}
speedUp(90); ←인자값 90. int value 변수에 저장됨


 */